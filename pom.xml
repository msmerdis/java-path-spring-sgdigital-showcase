<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- Packaging -->
	<modelVersion>4.0.0</modelVersion>
	<packaging>pom</packaging>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.5</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<!-- Versioning -->
	<groupId>gr.codelearn</groupId>
	<artifactId>java-path-spring</artifactId>
	<version>2021.1.0</version>

	<!-- Meta-data -->
	<name>[${project.artifactId}]</name>
	<description>Java Learning @ Development Path, Spring module</description>
	<organization>
		<name>Code.Learn by Code.Hub</name>
		<url>https://www.codehub.gr/codelearn/</url>
	</organization>
	<inceptionYear>2021</inceptionYear>

	<!-- Modules -->
	<modules>
		<module>java-path-spring-core</module>
		<module>java-path-spring-app</module>
	</modules>

	<!-- Properties/Variables -->
	<properties>
		<!-- Desired Maven version -->
		<maven.version>3.6</maven.version>
		<!-- Build JDK -->
		<java.version>11</java.version>

		<!-- Maven source encoding -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Library versions-->
		<lombok.version>1.18.20</lombok.version>
		<log4j.version>2.14.1</log4j.version>
		<slf4j.version>1.7.32</slf4j.version>
		<disruptor-maven-plugin.version>3.4.4</disruptor-maven-plugin.version>
		<datasource-proxy.version>1.7</datasource-proxy.version>
	</properties>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.projectlombok</groupId>
				<artifactId>lombok</artifactId>
				<version>${lombok.version}</version>
				<scope>provided</scope>
			</dependency>
			<!--
			Due to a break in compatibility in the SLF4J binding, as of Log4J2 release 2.11.1, we need to
			use the following plugin in case of Java 1.8 or greater.

			Log4j API and Core implementation along with Slf4j libraries required are implicit
			dependencies.
			-->
			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-slf4j18-impl</artifactId>
				<version>${log4j.version}</version>
			</dependency>
			<!--
			This is to stop receiving errors about failing to load class "org.slf4j.impl.StaticLoggerBinder"
			-->
			<dependency>
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>${slf4j.version}</version>
				<exclusions>
					<exclusion>
						<artifactId>slf4j-api</artifactId>
						<groupId>org.slf4j</groupId>
					</exclusion>
				</exclusions>
			</dependency>
			<!--
			Asynchronous Logging @see https://logging.apache.org/log4j/2.x/manual/async.html
			Hint:
			Don't forget to set system property
			-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector
			 to make all loggers asynchronous
			-->
			<dependency>
				<groupId>com.lmax</groupId>
				<artifactId>disruptor</artifactId>
				<version>${disruptor-maven-plugin.version}</version>
			</dependency>
			<!-- Datasource proxy -->
			<dependency>
				<groupId>net.ttddyy</groupId>
				<artifactId>datasource-proxy</artifactId>
				<version>${datasource-proxy.version}</version>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- Dependencies -->
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
			<exclusions>
				<!-- Declare my intention to utilize another log mechanism -->
				<exclusion>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- You can easily generate your own configuration metadata file from items annotated with
		@ConfigurationProperties by using the spring-boot-configuration-processor jar. The jar includes a Java
		annotation processor which is invoked as your project is compiled. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j18-impl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-simple</artifactId>
		</dependency>
		<dependency>
			<groupId>com.lmax</groupId>
			<artifactId>disruptor</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
	</dependencies>

	<build>
		<!-- Plugins and corresponding configuration used by all modules -->
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.2.0</version>
				<configuration>
					<delimiters>
						<!-- Certain JDBC connection URLs contain special character like the Oracle case -->
						<delimiter>#</delimiter>
					</delimiters>
					<useDefaultDelimiters>false</useDefaultDelimiters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>3.0.0-M3</version>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>${java.version}</version>
								</requireJavaVersion>
								<requireMavenVersion>
									<version>${maven.version}</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<!--
					In order to compile your project for Java 11, add the release configuration to the compiler
					plugin, a new compiler parameter to replace the source and target version parameters
					-->
					<release>${java.version}</release>
					<forceJavacCompilerUse>true</forceJavacCompilerUse>
					<optimize>true</optimize>
					<fork>true</fork>
					<annotationProcessorPaths>
						<path>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
							<version>${lombok.version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>
			<!--
			 - Scans a project's dependencies and produces a report of those dependencies which have newer
			 - versions available:
			 - mvn versions:display-dependency-updates
			 -
			 - Scans a project and produces a report of those properties which are used to control artifact
			 - versions and which properties have newer versions available:
			 - mvn versions:display-property-updates
			 -
			 - Scans a project's plugins and produces a report of those plugins which have newer versions
			 - available, taking care of Maven version prerequisites:
			 - mvn versions:display-plugin-updates
			 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>2.8.1</version>
				<configuration>
					<generateBackupPoms>false</generateBackupPoms>
					<!-- In case we want to exclude a library from check -->
					<!--
					<excludes>
						<exclude>org.apache.commons:commons-collections4</exclude>
					</excludes>
					-->
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
				<configuration>
					<argLine>
						--illegal-access=permit
					</argLine>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.0.0-M5</version>
				<configuration>
					<argLine>
						--illegal-access=permit
					</argLine>
				</configuration>
			</plugin>
		</plugins>

		<!-- Resources -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*.properties</include>
					<include>**/*.yml</include>
					<include>**/*.xml</include>
					<include>**/*.csv</include>
					<include>**/*.sql</include>
					<include>**/*.ftl</include>
					<include>**/*.pem</include>
					<include>**/*.txt</include>
				</includes>
				<filtering>true</filtering>
			</resource>
		</resources>

		<defaultGoal>package</defaultGoal>
		<directory>${basedir}/target</directory>
		<finalName>${project.artifactId}-${project.version}</finalName>
	</build>
</project>
